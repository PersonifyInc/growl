#!/usr/bin/env ruby -S rake --verbose --trace --rakefile
# -*- encoding: utf-8 -*-

# it'd be fairly abnormal to install rake without RubyGems... but you never know, do you?
require 'rubygems' unless defined?(Gem)


##################
# Path Variables #
##################

toplevel_dir                         = File.expand_path '..'
                                  
                                  
#Transifex files                  
ilocalize_dir                        = File.join(toplevel_dir, "iLocalize") # growl-dev/iLocalize
translation_dir                      = File.join(ilocalize_dir, "translations") # growl-dev/iLocalize/translations

#Core Growl
core_growl_dir                       = File.join(toplevel_dir, "Core") #growl-dev/Core
core_growl_resources_dir             = File.join(core_growl_dir, "Resources") #growl-dev/Core/Resources

                                  
#Display Plugins                  
plugins_dir                          = File.join(toplevel_dir, "Plugins") # growl-dev/Plugins
displays_dir                         = File.join(plugins_dir, "Displays") # growl-dev/Plugins/Displays

#Automator
system_plugins_dir                   = File.join(plugins_dir, "System") #growl-dev/Plugins/System
growlaction_dir                      = File.join(system_plugins_dir, "GrowlAction") #growl-dev/Plugins/System/GrowlAction

                                  
#Extras                           
extras_dir                           = File.join(toplevel_dir, "Extras") #growl-dev/Extras
capster_dir                          = File.join(extras_dir, "Capster") #growl-dev/Extras/Capster
capster_subdir                       = File.join(capster_dir, "Growl Caps Notifier") #growl-dev/Extras/Capster/Growl Caps Notifier
hardwaregrowler_dir                  = File.join(extras_dir, "HardwareGrowler") #growl-dev/Extras/HardwareGrowler
growltunes_dir                       = File.join(extras_dir, "GrowlTunes") #growl-dev/Extras/GrowlTunes
growltunes_subdir                    = File.join(growltunes_dir, "GrowlTunes") #growl-dev/Extras/GrowlTunes/GrowlTunes

#Extras
capster_localizable_strings          = File.join(translation_dir, "TGP.capster-localizable-strings-file")
growltunes_localizable_strings       = File.join(translation_dir, "TGP.growltunes-localizable-strings-file")
hardwaregrowler_localizable_strings  = File.join(translation_dir, "TGP.hardwaregrowler-localizable-strings")

#Growl Display Plugins
growl_bezel_display_strings          = File.join(translation_dir, "TGP.growl-bezel-display-plugin-localizable-string")
growl_ical_display_strings           = File.join(translation_dir, "TGP.growl-ical-display-localizable-string")
growl_sms_display_strings            = File.join(translation_dir, "TGP.growl-sms-display-localizable-strings")
growl_mailme_display_strings         = File.join(translation_dir, "TGP.growl-mailme-display-localizable-strings")
growl_speech_display_strings         = File.join(translation_dir, "TGP.growl-speech-display-localizable-string")
growl_brushed_display_strings        = File.join(translation_dir, "TGP.growl-brushed-localizable-string")

#Growl Global Localizable Files
growl_pluginpref_strings             = File.join(translation_dir, "TGP.growl-pluginprefstrings-strings-file")
growl_action_strings                 = File.join(translation_dir, "TGP.growl-automator-action-localizable-strings")
growl_localizable_strings            = File.join(translation_dir, "TGP.growl-localizable-strings-file")
growl_mainmenu_strings               = File.join(translation_dir, "TGP.growl-mainmenu-strings-file")




#Display Destinations
ical_display_destination             = File.join(displays_dir, "iCal")
bezel_display_destination            = File.join(displays_dir, "Bezel") # growl-dev/Plugins/Displays/Bezel
sms_display_destination              = File.join(displays_dir, "SMS")
mailme_display_destination           = File.join(displays_dir, "MailMe")
speech_display_destination           = File.join(displays_dir, "Speech")
brushed_display_destination          = File.join(displays_dir, "Brushed")

#ShortcutRecorder Paths

sr_destination                       = File.join(toplevel_dir, "../shortcutrecorder/Framework/Localizations")
sr_source                            = File.join(translation_dir, "TGP.shortcutrecorder-localizable-strings")


#Growl Global Localizable Files Destinations


shortcodes = {
    :sk => 'sk',
    :pt_BR => 'pt-BR',
    :nb_NO => 'nb',
    :ja => 'ja',
    :ko => 'ko',
    :zh_CN => 'zh-Hans',
    :zh_TW => 'zh-Hant',
    :cs => 'cs',
    :el => 'el',
    :es_ES => 'es',
    :fr => 'fr',
    :nl => 'nl',
    :pt_PT => 'pt_PT',
    :ru_RU => 'ru',
    :ro_RO => 'ro',
    :pl => 'pl',
    :de => 'de',
    :da => 'da',
    :sv => 'sv',
    :et => 'et',
    :he => 'he',
    :ar => 'ar',
    :lv_LV => 'lv',
    :it => 'it',
    :th_TH => 'th'
}

starts = {
    :growlaction =>      growl_action_strings,
    :pluginprefs =>      growl_pluginpref_strings,
    :growllocalizable => growl_localizable_strings,
    :mainmenu =>         growl_mainmenu_strings,
    :bezel =>            growl_bezel_display_strings,
    :ical =>             growl_ical_display_strings,
    :sms =>              growl_sms_display_strings,
    :mailme =>           growl_mailme_display_strings,
    :speech =>           growl_speech_display_strings,
    :brushed =>          growl_brushed_display_strings,
}

destinations = {
    :growlaction =>      "#{growlaction_dir}/%%lproj%%/InfoPlist.strings",
    :pluginprefs =>      "#{core_growl_resources_dir}/%%lproj%%/PluginPrefStrings.strings",
    :growllocalizable => "#{core_growl_resources_dir}/%%lproj%%/Localizable.strings",
    :mainmenu =>         "#{core_growl_resources_dir}/%%lproj%%/mainmenu.strings",
    :bezel =>            "#{bezel_display_destination}/%%lproj%%/Localizable.strings",
    :ical =>             "#{ical_display_destination}/%%lproj%%/Localizable.strings",
    :sms =>              "#{sms_display_destination}/%%lproj%%/Localizable.strings",
    :mailme =>           "#{mailme_display_destination}/%%lproj%%/Localizable.strings",
    :speech =>           "#{speech_display_destination}/%%lproj%%/Localizable.strings",
    :brushed =>          "#{brushed_display_destination}/%%lproj%%/Localizable.strings",
}

#################
# End Variables #
#################

desc "Direct translation method, provide source in iLocalize and destination with lproj folder listed as %%lproj%%"
task :translate, :source, :destination do |t, args|
    curdir = FileUtils.pwd()
    FileUtils.cd("#{ilocalize_dir}")
    if args.count < 2
        puts "Not enough arguments! Need source and destination"
        return
    end
    
    source = args[:source]
    destination = args[:destination]
    shortcodes.each_pair do |key, value|
#        puts "translating #{key} to #{value}"
        strings = "#{key}.strings"
        lproj = "#{value}.lproj"
        
        destCopy = Marshal.load(Marshal.dump(destination))
        destCopy["%%lproj%%"] = lproj

        destDir = File.dirname(destCopy)
        if File.exist?("#{source}/#{strings}") and File.exist?(destDir)
#            puts "from #{source}/#{strings} to #{destCopy}"
            FileUtils.cp_r("#{source}/#{strings}", "#{destCopy}")
#        else
#            puts "Either start or destination doesn't exist"
        end
#        puts "Done with #{key}"
    end
end

desc "update growl"
task :update_growl do

    starts.each_pair do |start_key, start|
        puts "translating #{start_key}"
        Rake::Task[:translate].invoke(start, destinations[start_key])
        Rake::Task[:translate].reenable
#        puts "done translating #{start_key}"
    end
  puts "Done Updating Growl"
end

desc "update shortcut recorder"
task :update_sr do
    Rake::Task[:translate].invoke(sr_source, "#{sr_destination}/%%lproj%%/ShortcutRecorder.strings")
end
