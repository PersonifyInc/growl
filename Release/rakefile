
#To build Growl, follow this example:
#VERSION=SOMETHING CONFIGURATION=Localization rake build:growl
#
#The configuration is specified, along with the target to build. Rake does the building.
#Change the version number before building.


GROWLVERSION = ENV['VERSION'] || "1.3.1"

TOOLCHAIN = ENV['TOOLCHAIN'] || '/Developer'
CONFIGURATION = ENV['CONFIGURATION'] || 'Release'
XCODEBUILD = "#{TOOLCHAIN}/usr/bin/xcodebuild"
PACKAGE_MAKER = "/Developer/Applications/Utilities/PackageMaker.app/Contents/MacOS/packagemaker"
SRCROOT = File.expand_path("..")
DESTDIR = File.expand_path("distribution")
BUILD_ROOT = File.join(DESTDIR, "build")
PRODUCT_ROOT = File.join(DESTDIR, "product")
CSI = "3rd Party Mac Developer Installer: The Growl Project, LLC"
BETA=0

task :default => "package_everything"

task :package_everything => [:setup, "package:growlnotify", "package:hardwaregrowler", "package:growltunes", "package:growl", "package:sdk"] do
puts "Done Packaging"
end

task :package_growl => [:setup, "package:growl"] do
end

task :package_sdk => [:setup, "package:sdk"] do
end

task :package_growlnotify => [:setup, "package:growlnotify"] do
end

task :package_hardwaregrowler => [:setup, "package:hardwaregrowler"] do
end

task :setup do
	system("sed -e \"s/INSERT_VERSION_HERE/#{GROWLVERSION}/\" < \"#{SRCROOT}/GrowlVersion.h.tmpl\" > \"#{SRCROOT}/GrowlVersion.h\"")
	if(CONFIGURATION == "Beta")
		CONFIGURATION="Release"
		BETA=1
	end

	if(CONFIGURATION == "Localization")
		BETA = 1
	end
	
	FileUtils.rm_rf(DESTDIR)
	FileUtils.mkdir_p(PRODUCT_ROOT)
end

#you shouldn't need to call any of the following tasks directly
namespace "build" do

	task :growlnotify do
		system "#{XCODEBUILD} -project #{SRCROOT}/Extras/growlnotify/growlnotify.xcodeproj -configuration #{CONFIGURATION} SYMROOT=#{BUILD_ROOT}/growlnotify"
	end

	task :growl do
		system "#{XCODEBUILD} -project #{SRCROOT}/Growl.xcodeproj -target Growl.app -configuration #{CONFIGURATION} SYMROOT=#{BUILD_ROOT}/growl"
	end

	task :hardwaregrowler do
		system "#{XCODEBUILD} -project #{SRCROOT}/Extras/HardwareGrowler/HardwareGrowler.xcodeproj -configuration #{CONFIGURATION} SYMROOT=#{BUILD_ROOT}/hardwaregrowler"
	end
	
	task :growltunes do
		system "#{XCODEBUILD} -project #{SRCROOT}/Extras/GrowlTunes/GrowlTunes.xcodeproj -configuration #{CONFIGURATION} SYMROOT=#{BUILD_ROOT}/growltunes"
	end
	
	task :beephammer do
		system "#{XCODEBUILD} -project \"#{SRCROOT}/Developer Tools/BeepHammer/BeepHammer.xcodeproj\" -configuration #{CONFIGURATION} SYMROOT=#{BUILD_ROOT}/beephammer"
	end

        task :multigrowl do
                system "#{XCODEBUILD} -project \"#{SRCROOT}/Developer Tools/MultiGrowl/MultiGrowl.xcodeproj\" -configuration #{CONFIGURATION} SYMROOT=#{BUILD_ROOT}/multigrowl"
        end

	task :framework do
		system "#{XCODEBUILD} -project #{SRCROOT}/Growl.xcodeproj -target Growl.framework -configuration #{CONFIGURATION} SYMROOT=#{BUILD_ROOT}/framework"
	end
   
   	task :gntpclientxpc do
		system "#{XCODEBUILD} -project #{SRCROOT}/Growl.xcodeproj -target GNTPClientService -configuration #{CONFIGURATION} SYMROOT=#{BUILD_ROOT}/gntpclientxpc"
   	end
end

namespace "package" do
	
	task :growlnotify => ["build:growlnotify"] do
		curdir = FileUtils.pwd()
		FileUtils.cd("#{BUILD_ROOT}/growlnotify/#{CONFIGURATION}")
		#package up growlnotify
      system "#{PACKAGE_MAKER} --no-relocate --doc #{SRCROOT}/Release/growlnotify/growlnotify.pmdoc --out #{BUILD_ROOT}/growlnotify/#{CONFIGURATION}/GrowlNotify.pkg --version #{GROWLVERSION} --id info.growl.growlnotify.growlnotify.pkg -v" 
		system "zip -r GrowlNotify-#{GROWLVERSION}.zip GrowlNotify.pkg"
      system "cp -Rp GrowlNotify-#{GROWLVERSION}.zip #{PRODUCT_ROOT}"
		system "zip -r #{PRODUCT_ROOT}/growlnotify-#{GROWLVERSION}-dSYM.zip growlnotify.dSYM"
		FileUtils.cd(curdir)
	end

	task :growl => ["build:growl"] do
		curdir = FileUtils.pwd()
		absolute = File.expand_path("#{PRODUCT_ROOT}")
		FileUtils.mkdir_p(absolute)
		FileUtils.cd("#{BUILD_ROOT}/growl/#{CONFIGURATION}")
		if(BETA==0)
			system "productbuild --component Growl.app /Applications --sign \"#{CSI}\" Growl.pkg && cp -Rp Growl.pkg #{absolute}/"
		elsif (BETA)
			system "zip -r #{absolute}/Growl-#{GROWLVERSION}.zip Growl.app/"
		end
		system "zip -r #{absolute}/Growl-#{GROWLVERSION}-dSYM.zip *.dSYM"
		FileUtils.cd(curdir)
		
	end

	task :hardwaregrowler => ["build:hardwaregrowler"] do
		curdir = FileUtils.pwd()
		FileUtils.cd("#{BUILD_ROOT}/hardwaregrowler/#{CONFIGURATION}")
		if(BETA==0)
			system "productbuild --component HardwareGrowler.app /Applications --sign \"#{CSI}\" HardwareGrowler.pkg && cp -Rp HardwareGrowler.pkg #{PRODUCT_ROOT}"
		elsif (BETA)
			system "zip -r -y #{PRODUCT_ROOT}/HardwareGrowler-#{GROWLVERSION}.zip HardwareGrowler.app/"
		end
		system "zip -r #{PRODUCT_ROOT}/HardwareGrowler-#{GROWLVERSION}-dSYM.zip HardwareGrowler.dSYM"
		FileUtils.cd(curdir)
	end
	
	task :growltunes => ["build:growltunes"] do
		curdir = FileUtils.pwd()
		FileUtils.cd("#{BUILD_ROOT}/growltunes/#{CONFIGURATION}")
		if(!BETA)
			system "productbuild --component GrowlTunes.app /Applications --sign \"#{CSI}\" GrowlTunes.pkg && cp -Rp GrowlTunes.pkg #{PRODUCT_ROOT}"
		elsif (BETA)
			system "zip -r -y #{PRODUCT_ROOT}/GrowlTunes.zip GrowlTunes.app/"
		end
		system "zip -r #{PRODUCT_ROOT}/GrowlTunes-dSYM.zip GrowlTunes.dSYM"
		FileUtils.cd(curdir)
	end
	
	task :sdk => ["build:beephammer", "build:framework", "build:gntpclientxpc"] do
		FileUtils.mkdir_p("#{DESTDIR}/Growl-#{GROWLVERSION}-SDK")
		FileUtils.cd("#{DESTDIR}/Growl-#{GROWLVERSION}-SDK")
		FileUtils.mkdir_p("Developer Tools")
		FileUtils.mkdir_p("Framework")
		FileUtils.mkdir_p("Framework/Legacy")
		FileUtils.mkdir_p("Bindings")
      		FileUtils.mkdir_p("XPC Client")
		
		#copy over the Applescript samples
		FileUtils.cp("#{SRCROOT}/Bindings/applescript/Test Growl AppleScript.scpt", "Bindings")
		FileUtils.cp("#{SRCROOT}/Bindings/applescript/Test GrowlControl AppleScript.scpt", "Bindings")
		
		#copy over the framework
		FileUtils.cp_r("#{BUILD_ROOT}/framework/#{CONFIGURATION}/Growl.framework", "Framework", :remove_destination => true)
		
		#copy over the 1.2.2 framework
		FileUtils.cp_r("#{SRCROOT}/legacy/Growl.framework", "Framework/Legacy")

		#copy over developer tools
		FileUtils.cp_r("#{BUILD_ROOT}/beephammer/#{CONFIGURATION}/BeepHammer.app", "Developer Tools")
                FileUtils.cp_r("#{SRCROOT}/Developer Tools/MultiGrowl", "Developer Tools")
 		FileUtils.ln_s("../../../Framework/Growl.framework", "Developer Tools/MultiGrowl/external/Growl.framework")
		FileUtils.ln_s("../../../../Framework/legacy/Growl.framework", "Developer Tools/MultiGrowl/external/legacy/Growl.framework")

      		#copy over XPC and its script
      		FileUtils.cp_r("#{BUILD_ROOT}/gntpclientxpc/#{CONFIGURATION}/com.company.application.GNTPClientService.xpc", "XPC Client")
      		FileUtils.cp("#{SRCROOT}/scripts/xpc-rename-move.rb", "XPC Client")
		
		FileUtils.cd("..")
		system "zip -r -y #{PRODUCT_ROOT}/Growl-#{GROWLVERSION}-SDK.zip Growl-#{GROWLVERSION}-SDK/"
		
	end
end
